import java.text.SimpleDateFormat

plugins {
    id "com.jfrog.artifactory" version '4.16.1'
    id "biz.aQute.bnd.builder" version "5.3.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'signing'
apply plugin: 'antlr'

def getDevelopmentVersion() {
    def output = new StringBuilder()
    def error = new StringBuilder()
    def gitShortHash = 'git rev-parse --short HEAD'.execute()
    gitShortHash.waitForProcessOutput(output, error)
    def gitHash = output.toString().trim()
    if (gitHash.isEmpty()) {
        println "git hash is empty: error: ${error.toString()}"
        throw new IllegalStateException("git hash could not be determined")
    }
    def version = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date()) + "-" + gitHash
    println "created development version: $version"
    version
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def slf4jVersion = '1.7.25'
def graphqlJavaVersion = '2021-03-22T20-02-28-3a701a0f'

def releaseVersion = System.env.RELEASE_VERSION
version = releaseVersion ? releaseVersion : getDevelopmentVersion()
group = 'com.atlassian'


repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'groovy'

jar {
    from "LICENSE"
    manifest {
        attributes('Automatic-Module-Name': 'nadel')
    }
}

task extractGraphqlGrammar(type: Copy) {
    from({ zipTree({ configurations.compile.files.find({ it.path.contains('graphql-java/graphql-java/') }) }()) }) {
        include '*.g4'
    }
    into 'src/main/antlr'
}

configurations {
    graphqlJavaSource
}


task generateAntrlToJavaSource {
    doLast {
        copy {
            from({ zipTree(configurations.graphqlJavaSource.singleFile).files }) {
                include 'GraphqlAntlrToLanguage.java'
            }
            into 'build/generated-src/antlr/main/graphql/nadel/parser'
        }
        def replacePatterns = [
                'package graphql.parser;'                        : 'package graphql.nadel.parser;\nimport graphql.parser.MultiSourceReader;\nimport graphql.parser.AntlrHelper;',
                'import graphql.parser.antlr.GraphqlParser;'     : 'import graphql.nadel.parser.antlr.StitchingDSLParser;',
                'import graphql.parser.antlr.GraphqlLexer;'      : 'import graphql.nadel.parser.antlr.StitchingDSLLexer;',
                'import graphql.parser.antlr.GraphqlBaseVisitor;': 'import graphql.nadel.parser.antlr.StitchingDSLBaseVisitor;',
                'import com.google.common.collect.ImmutableList;': 'import graphql.com.google.common.collect.ImmutableList;',
                'GraphqlBaseVisitor<Void>'                       : 'StitchingDSLBaseVisitor<Void>',
                'GraphqlParser'                                  : 'StitchingDSLParser',
                'GraphqlLexer'                                   : 'StitchingDSLLexer',
        ]

        def sourceFile = new File('build/generated-src/antlr/main/graphql/nadel/parser/GraphqlAntlrToLanguage.java')
        def content = sourceFile.text
        replacePatterns.each { content = content.replace(it.key, it.value) }
        def startIndex = content.indexOf('//MARKER START')
        def endIndex = content.indexOf('//MARKER END')
        assert startIndex > 0
        assert endIndex > 0
        def endIndexLine = content.indexOf('\n', endIndex)
        assert endIndexLine > 0
        content = content.substring(0, startIndex) + content.substring(endIndexLine + 1)
        sourceFile.write content
    }
}


dependencies {
    graphqlJavaSource('com.graphql-java:graphql-java:' + graphqlJavaVersion + ':sources') {
        transitive = false
    }
    compile 'com.graphql-java:graphql-java:' + graphqlJavaVersion
    compile 'org.antlr:antlr4-runtime:4.8'
    compile 'org.slf4j:slf4j-api:' + slf4jVersion
    antlr "org.antlr:antlr4:4.8"
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.codehaus.groovy:groovy-all:2.5.1'
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.objenesis:objenesis:2.1'
    testCompile 'com.google.code.gson:gson:2.8.0'
    testCompile 'org.slf4j:slf4j-simple:' + slf4jVersion
    testCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    testCompile 'org.openjdk.jmh:jmh-core:1.21'
    testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    testCompile 'com.google.guava:guava:28.0-jre'
}

compileJava.source file("build/generated-src"), sourceSets.main.java

generateGrammarSource {
    includes = ['StitchingDSL.g4']
    maxHeapSize = "64m"
    arguments += ["-visitor"]
    outputDirectory = file("${project.buildDir}/generated-src/antlr/main/graphql/nadel/parser/antlr")
}
generateGrammarSource.inputs.dir('src/main/antlr')


generateGrammarSource.dependsOn(extractGraphqlGrammar, generateAntrlToJavaSource)

task sourcesJar(type: Jar) {
    dependsOn classes
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options.encoding = 'UTF-8'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

allprojects {
    tasks.withType(Javadoc) {
        exclude('**/antlr/**')
    }


}

publishing {
    publications {
        graphqlJava(MavenPublication) {
            version version
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId project.group
            artifactId 'nadel'
            version project.version
            pom.withXml {
                // The ANTLR-related code below--introdcued in `1ac98bf`--addresses an issue with
                // the Gradle ANTLR plugin. `1ac98bf` can be reverted and this comment removed once
                // that issue is fixed and Gradle upgraded. See https://goo.gl/L92KiF and https://goo.gl/FY0PVR.
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.artifactId.text() == 'antlr4'
                }.each() {
                    it.parent().remove(it)
                }
                pomNode.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'nadel'
                    description 'GraphqL Java'
                    url "https://github.com/graphql-java/nadel"
                    scm {
                        url "https://github.com/atlassian-labs/nadel"
                        connection "https://github.com/atlassian-labs/nadel"
                        developerConnection "https://github.com/atlassian-labs/nadel"
                    }
                    licenses {
                        license {
                            name "Apache License 2.0"
                            url "http://www.apache.org/licenses/"
                            distribution "repo"
                        }
                    }
                    developers {
                        developer {
                            id 'andimarek'
                            name 'Andreas Marek'
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    publish {
        contextUrl = 'https://packages.atlassian.com/'

        repository {
            repoKey = 'maven-central'
            username = System.env.ARTIFACTORY_USERNAME
            password = System.env.ARTIFACTORY_API_KEY
        }
        defaults {
            publications('graphqlJava')
            publishIvy = false
            // This needs to be "false", otherwise, the artifactory plugin will try to publish
            // a build info file to Artifactory and fail because we don't have the permissions to do that.
            publishBuildInfo = false
        }
    }
}

signing {
    useInMemoryPgpKeys("$System.env.SIGNING_KEY", "$System.env.SIGNING_PASSWORD")
    sign publishing.publications.graphqlJava
}

// all publish tasks depend on the build task
tasks.withType(PublishToMavenRepository) {
    dependsOn build
}

task myWrapper(type: Wrapper) {
    gradleVersion = '6.8.3'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
}
