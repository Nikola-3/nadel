name: variable referenced input types rename works as expected
overallSchema:
  MyService: |
    service MyService {
      type Query {
        hello: World
        renameObject: ObjectOverall => renamed from renameObjectUnderlying # the field is renamed
        renameInterface: InterfaceOverall => renamed from renameInterfaceUnderlying
        renameUnion: UnionOverall => renamed from renameUnionUnderlying
        renameInput(arg1: InputOverall!, arg2: URL, arg3: EnumOverall): String
        renameString: String => renamed from renameStringUnderlying
        typenameTest: TypenameTest
      }
      type World {
        id: ID
        name: String
      }
      type ObjectOverall implements InterfaceOverall => renamed from ObjectUnderlying {
        name: String
      }
      interface InterfaceOverall => renamed from InterfaceUnderlying {
        name: String
      }
      union UnionOverall => renamed from UnionUnderlying = X | Y
      type X => renamed from XUnderlying {
        x: Int
      }
      type Y => renamed from YUnderlying {
        y: Int
      }
      input InputOverall => renamed from InputUnderlying {
        inputVal: String
      }
      scalar URL => renamed from String
      enum EnumOverall => renamed from EnumUnderlying {
        X, Y
      }
      type TypenameTest {
        object: ObjectOverall
        objects: [ObjectOverall]
      }
    }
underlyingSchema:
  MyService: |
    interface InterfaceUnderlying {
      name: String
    }

    union UnionUnderlying = XUnderlying | YUnderlying

    type ObjectUnderlying implements InterfaceUnderlying {
      name: String
    }

    type Query {
      hello: World
      renameInput(arg1: InputUnderlying!, arg2: String, arg3: EnumUnderlying): String
      renameInterfaceUnderlying: InterfaceUnderlying
      renameObjectUnderlying: ObjectUnderlying
      renameStringUnderlying: String
      renameUnionUnderlying: UnionUnderlying
      typenameTest: TypenameTest
    }

    type TypenameTest {
      object: ObjectUnderlying
      objects: [ObjectUnderlying]
    }

    type World {
      id: ID
      name: String
    }

    type XUnderlying {
      x: Int
    }

    type YUnderlying {
      y: Int
    }

    enum EnumUnderlying {
      X
      Y
    }

    input InputUnderlying {
      inputVal: String
    }
query: |
  query X($var1: InputOverall!, $var2: URL, $var3: EnumOverall) {
    renameInput(arg1: $var1, arg2: $var2, arg3: $var3)
  }
variables:
  var1:
    inputVal: x
serviceCalls:
  current:
    - serviceName: MyService
      request:
        query: |
          query nadel_2_MyService_X($var1: InputUnderlying!, $var2: String, $var3: EnumUnderlying) {
            renameInput(arg1: $var1, arg2: $var2, arg3: $var3)
          }
        variables:
          var1:
            inputVal: x
          var2: null
          var3: null
        operationName: nadel_2_MyService_X
      # language=JSON
      response: |-
        {
          "data": {
            "renameInput": "done"
          },
          "extensions": {}
        }
  nextgen:
    - serviceName: MyService
      request:
        query: |
          query {
            ... on Query {
              renameInput(arg1: {inputVal : "x"})
            }
          }
        variables: {}
        operationName: null
      # language=JSON
      response: |-
        {
          "data": {
            "renameInput": "done"
          },
          "extensions": {}
        }
# language=JSON
response: |-
  {
    "data": {
      "renameInput": "done"
    },
    "extensions": {
      "resultComplexity": {
        "totalNodeCount": 2,
        "serviceNodeCounts": {
          "MyService": 2
        },
        "fieldRenamesCount": 0,
        "typeRenamesCount": 0
      }
    }
  }
