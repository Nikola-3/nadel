name: one synthetic hydration call with longer path arguments and merged fields and
  renamed type
enabled:
  current: true
  nextgen: true
overallSchema:
  UserService: |
    type Query {
      usersQuery: RenamedUserQuery
    }
    type RenamedUserQuery @renamed(from: "UserQuery") {
      usersByIds(id: [ID]): [RenamedUser]
    }
    type RenamedUser @renamed(from: "User") {
      id: ID
      name: String
    }
  Issues: |
    type Query {
      issues: [Issue]
    }
    type Issue {
      id: ID
      authors: [RenamedUser] @hydrated(service: "UserService" field: "usersQuery.usersByIds" arguments: [{name: "id" value: "$source.authors.authorId"}] identifiedBy: "id" batchSize: 2)
    }
underlyingSchema:
  UserService: |
    type Query {
      usersQuery: UserQuery
    }

    type User {
      id: ID
      name: String
    }

    type UserQuery {
      usersByIds(id: [ID]): [User]
    }
  Issues: |
    type Issue {
      authorIds: [ID]
      authors: [IssueUser]
      id: ID
    }

    type IssueUser {
      authorId: ID
    }

    type Query {
      issues: [Issue]
    }
query: |
  query {
    issues {
      id
      authors {
        name
        id
      }
    }
  }
variables: {}
serviceCalls:
  current:
    - serviceName: Issues
      request:
        query: |
          query nadel_2_Issues {
            issues {
              id
              authors {
                authorId
              }
            }
          }
        variables: {}
        operationName: nadel_2_Issues
      # language=JSON
      response: |-
        {
          "data": {
            "issues": [
              {
                "id": "ISSUE-1",
                "authors": [
                  {
                    "authorId": "USER-1"
                  },
                  {
                    "authorId": "USER-2"
                  }
                ]
              }
            ]
          },
          "extensions": {}
        }
    - serviceName: UserService
      request:
        query: |
          query nadel_2_UserService {
            usersQuery {
              usersByIds(id: ["USER-1", "USER-2"]) {
                name
                id
                object_identifier__UUID: id
              }
            }
          }
        variables: {}
        operationName: nadel_2_UserService
      # language=JSON
      response: |-
        {
          "data": {
            "usersQuery": {
              "usersByIds": [
                {
                  "id": "USER-1",
                  "name": "User 1",
                  "object_identifier__UUID": "USER-1"
                },
                {
                  "id": "USER-2",
                  "name": "User 2",
                  "object_identifier__UUID": "USER-2"
                }
              ]
            }
          },
          "extensions": {}
        }
  nextgen:
    - serviceName: Issues
      request:
        query: |
          query {
            issues {
              __typename__batch_hydration__authors: __typename
              batch_hydration__authors__authors: authors {
                authorId
              }
              id
            }
          }
        variables: {}
      # language=JSON
      response: |-
        {
          "data": {
            "issues": [
              {
                "batch_hydration__authors__authors": [
                  {
                    "authorId": "USER-1"
                  },
                  {
                    "authorId": "USER-2"
                  }
                ],
                "__typename__batch_hydration__authors": "Issue",
                "id": "ISSUE-1"
              }
            ]
          },
          "extensions": {}
        }
    - serviceName: UserService
      request:
        query: |
          query {
            usersQuery {
              usersByIds(id: ["USER-1", "USER-2"]) {
                id
                batch_hydration__authors__id: id
                name
              }
            }
          }
        variables: {}
      # language=JSON
      response: |-
        {
          "data": {
            "usersQuery": {
              "usersByIds": [
                {
                  "name": "User 1",
                  "id": "USER-1",
                  "batch_hydration__authors__id": "USER-1"
                },
                {
                  "name": "User 2",
                  "id": "USER-2",
                  "batch_hydration__authors__id": "USER-2"
                }
              ]
            }
          },
          "extensions": {}
        }
# language=JSON
response: |-
  {
    "data": {
      "issues": [
        {
          "id": "ISSUE-1",
          "authors": [
            {
              "name": "User 1",
              "id": "USER-1"
            },
            {
              "name": "User 2",
              "id": "USER-2"
            }
          ]
        }
      ]
    },
    "extensions": {}
  }
