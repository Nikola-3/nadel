name: hydration call with two argument values from original field arguments
enabled:
  current: true
  nextgen: true
overallSchema:
  UserService: |
    service UserService {
      type Query {
        usersByIds(extraArg1: String, extraArg2: Int, id: [ID]): [User]
      }
      type User {
        id: ID
        name: String
      }
    }
  Issues: |
    service Issues {
      type Query {
        issues: [Issue]
      }
      type Issue {
        id: ID
        author(extraArg1: String, extraArg2: Int): User => hydrated from UserService.usersByIds(extraArg1: $argument.extraArg1, extraArg2: $argument.extraArg2, id: $source.authorId) object identified by id, batch size 2
      }
    }
underlyingSchema:
  UserService: |
    type Query {
      usersByIds(extraArg1: String, extraArg2: Int, id: [ID]): [User]
    }

    type User {
      id: ID
      name: String
    }
  Issues: |
    type Issue {
      authorId: ID
      id: ID
    }

    type Query {
      issues: [Issue]
    }
query: |
  query {
    issues {
      id
      author(extraArg1: "extraArg1", extraArg2: 10) {
        name
      }
    }
  }
variables: {}
serviceCalls:
  current:
    - serviceName: Issues
      request:
        query: |
          query nadel_2_Issues {
            issues {
              id
              authorId
            }
          }
        variables: {}
        operationName: nadel_2_Issues
      # language=JSON
      response: |-
        {
          "data": {
            "issues": [
              {
                "id": "ISSUE-1",
                "authorId": "USER-1"
              }
            ]
          },
          "extensions": {}
        }
    - serviceName: UserService
      request:
        query: |
          query nadel_2_UserService {
            usersByIds(id: ["USER-1"], extraArg1: "extraArg1", extraArg2: 10) {
              name
              object_identifier__UUID: id
            }
          }
        variables: {}
        operationName: nadel_2_UserService
      # language=JSON
      response: |-
        {
          "data": {
            "usersByIds": [
              {
                "id": "USER-1",
                "name": "User 1",
                "object_identifier__UUID": "USER-1"
              }
            ]
          },
          "extensions": {}
        }
  nextgen:
    - serviceName: Issues
      request:
        query: |
          query {
            ... on Query {
              issues {
                ... on Issue {
                  __typename__batch_hydration__author: __typename
                  batch_hydration__author__authorId: authorId
                  id
                }
              }
            }
          }
        variables: {}
        operationName: null
      # language=JSON
      response: |-
        {
          "data": {
            "issues": [
              {
                "__typename__batch_hydration__author": "Issue",
                "id": "ISSUE-1",
                "batch_hydration__author__authorId": "USER-1"
              }
            ]
          },
          "extensions": {}
        }
    - serviceName: UserService
      request:
        query: |
          query {
            ... on Query {
              usersByIds(extraArg1: "extraArg1", extraArg2: 10, id: ["USER-1"]) {
                ... on User {
                  batch_hydration__author__id: id
                  name
                }
              }
            }
          }
        variables: {}
        operationName: null
      # language=JSON
      response: |-
        {
          "data": {
            "usersByIds": [
              {
                "name": "User 1",
                "batch_hydration__author__id": "USER-1"
              }
            ]
          },
          "extensions": {}
        }
# language=JSON
response: |-
  {
    "data": {
      "issues": [
        {
          "id": "ISSUE-1",
          "author": {
            "name": "User 1"
          }
        }
      ]
    },
    "extensions": {}
  }
