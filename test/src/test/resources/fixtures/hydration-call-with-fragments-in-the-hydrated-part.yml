name: hydration call with fragments in the hydrated part
overallSchema:
  UserService: |
    service UserService {
      type Query {
        usersByIds(id: [ID]): [User]
      }
      type User {
        id: ID
        name: String
      }
    }
  Issues: |
    service Issues {
      type Query {
        issues: [Issue]
      }
      type Issue {
        id: ID
        authorDetails: [AuthorDetail]
        authors: [User] => hydrated from UserService.usersByIds(id: $source.authorDetails.authorId) object identified by id, batch size 2
      }
      type AuthorDetail {
        name: String
      }
    }
services:
  UserService: |
    type Query {
      usersByIds(id: [ID]): [User]
    }

    type User {
      id: ID
      name: String
    }
  Issues: |
    type AuthorDetail {
      authorId: ID
      name: String
    }

    type Issue {
      authorDetails: [AuthorDetail]
      id: ID
    }

    type Query {
      issues: [Issue]
    }
query: |
  fragment IssueFragment on Issue {
    id
  }

  query {
    issues {
      ...IssueFragment
      id
      authors {
        id
        ...UserFragment1
      }
    }
    usersByIds(id: ["USER-1"]) {
      ...UserFragment1
    }
  }

  fragment UserFragment1 on User {
    id
    name
    ...UserFragment2
  }

  fragment UserFragment2 on User {
    name
  }
variables: {}
calls:
  - request:
      query: |
        query nadel_2_Issues {
          issues {
            ...IssueFragment
            id
            authorDetails {
              authorId
            }
          }
        }

        fragment IssueFragment on Issue {
          id
        }
      variables: {}
      operationName: nadel_2_Issues
    # language=JSON
    response: |-
      {
        "data": {
          "issues": [
            {
              "id": "ISSUE-1",
              "authorDetails": [
                {
                  "authorId": "USER-1"
                },
                {
                  "authorId": "USER-2"
                }
              ]
            }
          ]
        },
        "extensions": {}
      }
  - request:
      query: |
        query nadel_2_UserService {
          usersByIds(id: ["USER-1"]) {
            ...UserFragment1
          }
        }

        fragment UserFragment1 on User {
          id
          name
          ...UserFragment2
        }

        fragment UserFragment2 on User {
          name
        }
      variables: {}
      operationName: nadel_2_UserService
    # language=JSON
    response: |-
      {
        "data": {
          "usersByIds": [
            {
              "id": "USER-1",
              "name": "User 1",
              "object_identifier__UUID": "USER-1"
            }
          ]
        },
        "extensions": {}
      }
  - request:
      query: |
        query nadel_2_UserService {
          usersByIds(id: ["USER-1", "USER-2"]) {
            id
            ...UserFragment1
            object_identifier__UUID: id
          }
        }

        fragment UserFragment1 on User {
          id
          name
          ...UserFragment2
        }

        fragment UserFragment2 on User {
          name
        }
      variables: {}
      operationName: nadel_2_UserService
    # language=JSON
    response: |-
      {
        "data": {
          "usersByIds": [
            {
              "id": "USER-1",
              "name": "User 1",
              "object_identifier__UUID": "USER-1"
            },
            {
              "id": "USER-2",
              "name": "User 2",
              "object_identifier__UUID": "USER-2"
            }
          ]
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "issues": [
        {
          "id": "ISSUE-1",
          "authors": [
            {
              "id": "USER-1",
              "name": "User 1"
            },
            {
              "id": "USER-2",
              "name": "User 2"
            }
          ]
        }
      ],
      "usersByIds": [
        {
          "id": "USER-1",
          "name": "User 1"
        }
      ]
    },
    "extensions": {}
  }
