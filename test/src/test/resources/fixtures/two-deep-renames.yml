name: two deep renames
overallSchema:
  Issues: |
    service Issues {
      type Query {
        issues: [Issue]
      }
      type Issue {
        id: ID
        authorId: ID => renamed from authorDetails.authorId
        authorName: ID => renamed from authorDetails.name
      }
    }
services:
  Issues: |
    type AuthorDetail {
      authorId: ID
      name: String
    }

    type Issue {
      authorDetails: AuthorDetail
      id: ID
    }

    type Query {
      issues: [Issue]
    }
query: |
  query {
    issues {
      id
      authorId
      authorName
    }
  }
variables: {}
calls:
- request:
    query: |
      query nadel_2_Issues {
        issues {
          id
          authorDetails {
            authorId
          }
          authorDetails {
            name
          }
        }
      }
    variables: {}
    operationName: nadel_2_Issues
  response: |-
    {
      "data": {
        "issues": [
          {
            "id": "ISSUE-1",
            "authorDetails": {
              "authorId": "USER-1",
              "name": "User 1"
            }
          },
          {
            "id": "ISSUE-2",
            "authorDetails": {
              "authorId": "USER-2",
              "name": "User 2"
            }
          }
        ]
      },
      "extensions": {}
    }
response: |-
  {
    "data": {
      "issues": [
        {
          "id": "ISSUE-1",
          "authorId": "USER-1",
          "authorName": "User 1"
        },
        {
          "id": "ISSUE-2",
          "authorId": "USER-2",
          "authorName": "User 2"
        }
      ]
    },
    "extensions": {}
  }
