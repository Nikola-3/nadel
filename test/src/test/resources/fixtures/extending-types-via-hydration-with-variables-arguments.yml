name: extending types via hydration with variables arguments
overallSchema:
  Issue: |
    service Issue {
      type Query {
        issue: Issue
      }
      type Issue  {
        id: ID
      }
    }
  Association: |
    service Association {
      type Query {
        association(id: ID, filter: Filter): RenamedAssociation
      }
      input Filter  {
        name: String
      }
      type RenamedAssociation => renamed from Association {
        id: ID
        nameOfAssociation: String
      }
      extend type Issue {
        association(filter:Filter): RenamedAssociation => hydrated from Association.association(id: $source.id, filter: $argument.filter)
      }
    }
services:
  Issue: |
    type Issue {
      id: ID
    }

    type Query {
      issue: Issue
    }
  Association: |
    type Association {
      id: ID
      nameOfAssociation: String
    }

    type Query {
      association(filter: Filter, id: ID): Association
    }

    input Filter {
      name: String
    }
query: |
  query MyQuery($filter: Filter) {
    issue {
      association(filter: $filter) {
        nameOfAssociation
      }
    }
  }
variables:
  filter:
    name:
    - value
calls:
- request:
    query: |
      query nadel_2_Issue {
        issue {
          id
        }
      }
    variables: {}
    operationName: nadel_2_Issue
  response: |-
    {
      "data": {
        "issue": {
          "id": "ISSUE-1"
        }
      },
      "extensions": {}
    }
- request:
    query: |
      query nadel_2_Association($filter: Filter) {
        association(id: "ISSUE-1", filter: $filter) {
          nameOfAssociation
        }
      }
    variables:
      filter:
        name: '[value]'
    operationName: nadel_2_Association
  response: |-
    {
      "data": {
        "association": {
          "nameOfAssociation": "ASSOC NAME"
        }
      },
      "extensions": {}
    }
response: |-
  {
    "data": {
      "issue": {
        "association": {
          "nameOfAssociation": "ASSOC NAME"
        }
      }
    },
    "extensions": {}
  }
